
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_use_benchmark.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_plot_use_benchmark.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_use_benchmark.py:


Use the benchmark problems
==========================

This example shows how to use a single benchmark problem or 
all the problems.

.. GENERATED FROM PYTHON SOURCE LINES 14-20

.. code-block:: Python

    import tabulate
    import numericalderivative as nd
    import math
    import pylab as pl
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 21-24

First, we create an use a single problem.
We create the problem and get the function and its
first derivative

.. GENERATED FROM PYTHON SOURCE LINES 26-31

.. code-block:: Python

    problem = nd.ExponentialProblem()
    x = problem.get_x()
    function = problem.get_function()
    first_derivative = problem.get_first_derivative()








.. GENERATED FROM PYTHON SOURCE LINES 32-34

Then we use a finite difference formula and compare it to the
exact derivative.

.. GENERATED FROM PYTHON SOURCE LINES 36-45

.. code-block:: Python

    formula = nd.FirstDerivativeForward(function, x)
    step = 1.0e-5  # This is a first guess
    approx_first_derivative = formula.compute(step)
    exact_first_derivative = first_derivative(x)
    absolute_error = abs(approx_first_derivative - exact_first_derivative)
    print(f"Approximate first derivative = {approx_first_derivative}")
    print(f"Exact first derivative = {exact_first_derivative}")
    print(f"Absolute error = {absolute_error}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Approximate first derivative = 2.7182954199389098
    Exact first derivative = 2.718281828459045
    Absolute error = 1.359147986468301e-05




.. GENERATED FROM PYTHON SOURCE LINES 46-49

The problem is that the optimal step might not be the exact one.
The optimal step can be computed using the second derivative, which is
known in this problem.

.. GENERATED FROM PYTHON SOURCE LINES 51-59

.. code-block:: Python

    second_derivative = problem.get_second_derivative()
    second_derivative_value = second_derivative(x)
    optimal_step_forward_formula, absolute_error = nd.FirstDerivativeForward.compute_step(
        second_derivative_value
    )
    print(f"Optimal step for forward derivative = {optimal_step_forward_formula}")
    print(f"Minimum absolute error = {absolute_error}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Optimal step for forward derivative = 1.2130613194252668e-08
    Minimum absolute error = 3.297442541400256e-08




.. GENERATED FROM PYTHON SOURCE LINES 60-61

Now use this step

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: Python

    approx_first_derivative = formula.compute(optimal_step_forward_formula)
    exact_first_derivative = first_derivative(x)
    absolute_error = abs(approx_first_derivative - exact_first_derivative)
    print(f"Approximate first derivative = {approx_first_derivative}")
    print(f"Exact first derivative = {exact_first_derivative}")
    print(f"Absolute error = {absolute_error}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Approximate first derivative = 2.718281867990813
    Exact first derivative = 2.718281828459045
    Absolute error = 3.953176808124681e-08




.. GENERATED FROM PYTHON SOURCE LINES 71-72

We can use a collection of benchmark problems.

.. GENERATED FROM PYTHON SOURCE LINES 74-97

.. code-block:: Python

    benchmark = nd.BuildBenchmark()
    number_of_problems = len(benchmark)
    data = []
    for i in range(number_of_problems):
        problem = benchmark[i]
        name = problem.get_name()
        x = problem.get_x()
        interval = problem.get_interval()
        data.append(
            [
                f"#{i} / {number_of_problems}",
                f"{name}",
                f"{x}",
                f"{interval[0]}",
                f"{interval[1]}",
            ]
        )

    tabulate.tabulate(
        data,
        headers=["Index", "Name", "x", "xmin", "xmax"],
        tablefmt="html",
    )





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
    <thead>
    <tr><th>Index   </th><th>Name      </th><th style="text-align: right;">       x</th><th style="text-align: right;">     xmin</th><th style="text-align: right;">    xmax</th></tr>
    </thead>
    <tbody>
    <tr><td>#0 / 16 </td><td>polynomial</td><td style="text-align: right;"> 1      </td><td style="text-align: right;">-12      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#1 / 16 </td><td>inverse   </td><td style="text-align: right;"> 1      </td><td style="text-align: right;">  0.01   </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#2 / 16 </td><td>exp       </td><td style="text-align: right;"> 1      </td><td style="text-align: right;">  0      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#3 / 16 </td><td>log       </td><td style="text-align: right;"> 1      </td><td style="text-align: right;">  0.01   </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#4 / 16 </td><td>sqrt      </td><td style="text-align: right;"> 1      </td><td style="text-align: right;">  0.01   </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#5 / 16 </td><td>atan      </td><td style="text-align: right;"> 0.5    </td><td style="text-align: right;">-12      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#6 / 16 </td><td>sin       </td><td style="text-align: right;"> 1      </td><td style="text-align: right;"> -3.14159</td><td style="text-align: right;"> 3.14159</td></tr>
    <tr><td>#7 / 16 </td><td>scaled exp</td><td style="text-align: right;"> 1      </td><td style="text-align: right;">  0      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#8 / 16 </td><td>GMSW      </td><td style="text-align: right;"> 1      </td><td style="text-align: right;">  0      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#9 / 16 </td><td>SXXN1     </td><td style="text-align: right;">-8      </td><td style="text-align: right;">-12      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#10 / 16</td><td>SXXN2     </td><td style="text-align: right;"> 0.01   </td><td style="text-align: right;"> -1      </td><td style="text-align: right;"> 1      </td></tr>
    <tr><td>#11 / 16</td><td>SXXN3     </td><td style="text-align: right;"> 0.99999</td><td style="text-align: right;">-12      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#12 / 16</td><td>SXXN4     </td><td style="text-align: right;"> 1e-09  </td><td style="text-align: right;">-12      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#13 / 16</td><td>Oliver1   </td><td style="text-align: right;"> 1      </td><td style="text-align: right;">-12      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#14 / 16</td><td>Oliver2   </td><td style="text-align: right;"> 1      </td><td style="text-align: right;">-12      </td><td style="text-align: right;">12      </td></tr>
    <tr><td>#15 / 16</td><td>Oliver3   </td><td style="text-align: right;"> 1      </td><td style="text-align: right;">  0.01   </td><td style="text-align: right;">12      </td></tr>
    </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 98-99

Plot the benchmark problems.

.. GENERATED FROM PYTHON SOURCE LINES 101-126

.. code-block:: Python

    benchmark = nd.BuildBenchmark()
    number_of_problems = len(benchmark)
    number_of_columns = 3
    number_of_rows = math.ceil(number_of_problems / number_of_columns)
    number_of_points = 100
    pl.figure(figsize=(8.0, 7.0))
    data = []
    index = 1
    for i in range(number_of_problems):
        problem = benchmark[i]
        name = problem.get_name()
        print(f"Plot #{i}: {name}")
        x = problem.get_x()
        interval = problem.get_interval()
        function = problem.get_function()
        pl.subplot(number_of_rows, number_of_columns, index)
        x_grid = np.linspace(interval[0], interval[1], number_of_points)
        y_values = function(x_grid)
        pl.title(f"{name}")
        pl.plot(x_grid, y_values)
        # Update index
        index += 1

    pl.subplots_adjust(wspace=0.5, hspace=1.2)




.. image-sg:: /auto_example/images/sphx_glr_plot_use_benchmark_001.png
   :alt: polynomial, inverse, exp, log, sqrt, atan, sin, scaled exp, GMSW, SXXN1, SXXN2, SXXN3, SXXN4, Oliver1, Oliver2, Oliver3
   :srcset: /auto_example/images/sphx_glr_plot_use_benchmark_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Plot #0: polynomial
    Plot #1: inverse
    Plot #2: exp
    Plot #3: log
    Plot #4: sqrt
    Plot #5: atan
    Plot #6: sin
    Plot #7: scaled exp
    Plot #8: GMSW
    Plot #9: SXXN1
    Plot #10: SXXN2
    Plot #11: SXXN3
    Plot #12: SXXN4
    Plot #13: Oliver1
    Plot #14: Oliver2
    Plot #15: Oliver3





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.392 seconds)


.. _sphx_glr_download_auto_example_plot_use_benchmark.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_use_benchmark.ipynb <plot_use_benchmark.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_use_benchmark.py <plot_use_benchmark.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_use_benchmark.zip <plot_use_benchmark.zip>`
