
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_gill_murray_saunders_wright_benchmark.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_plot_gill_murray_saunders_wright_benchmark.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_gill_murray_saunders_wright_benchmark.py:


Experiment with Gill, Murray, Saunders and Wright method
========================================================

Find a step which is near to optimal for a centered finite difference 
formula.

References
----------
- Gill, P. E., Murray, W., Saunders, M. A., & Wright, M. H. (1983). Computing forward-difference intervals for numerical optimization. SIAM Journal on Scientific and Statistical Computing, 4(2), 310-321.

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: Python

    import numpy as np
    import pylab as pl
    import tabulate
    import numericalderivative as nd









.. GENERATED FROM PYTHON SOURCE LINES 24-63

.. code-block:: Python

    def compute_first_derivative_GMSW(
        f,
        x,
        f_prime,
        kmin,
        kmax,
        verbose=False,
    ):
        """
        Compute the approximate derivative from finite differences

        Parameters
        ----------
        f : function
            The function.
        x : float
            The point where the derivative is to be evaluated
        f_prime : function
            The exact first derivative of the function.
        verbose : bool, optional
            Set to True to print intermediate messages. The default is False.

        Returns
        -------
        absolute_error : float, > 0
            The absolute error between the approximate first derivative
            and the true first derivative.

        feval : int
            The number of function evaluations.
        """
        algorithm = nd.GillMurraySaundersWright(f, x, verbose=verbose)
        step, _ = algorithm.compute_step(kmin, kmax)
        f_prime_approx = algorithm.compute_first_derivative(step)
        feval = algorithm.get_number_of_function_evaluations()
        absolute_error = abs(f_prime_approx - f_prime(x))
        return absolute_error, feval









.. GENERATED FROM PYTHON SOURCE LINES 64-125

.. code-block:: Python

    def benchmark_method(
        function, derivative_function, test_points, kmin, kmax, verbose=False
    ):
        """
        Apply Stepleman & Winarsky method to compute the approximate first
        derivative using finite difference formula.

        Parameters
        ----------
        f : function
            The function.
        derivative_function : function
            The exact first derivative of the function
        test_points : list(float)
            The list of x points where the benchmark must be performed.
        verbose : bool, optional
            Set to True to print intermediate messages. The default is False.

        Returns
        -------
        average_relative_error : float, > 0
            The average relative error between the approximate first derivative
            and the true first derivative.
        feval : int
            The number of function evaluations.

        """
        number_of_test_points = len(test_points)
        relative_error_array = np.zeros(number_of_test_points)
        feval_array = np.zeros(number_of_test_points)
        for i in range(number_of_test_points):
            x = test_points[i]
            if verbose:
                print(f"x = {x:.3f}")
            (
                absolute_error,
                number_of_function_evaluations,
            ) = compute_first_derivative_GMSW(
                function,
                x,
                derivative_function,
                kmin,
                kmax,
            )
            relative_error = absolute_error / abs(derivative_function(x))
            if verbose:
                print(
                    "x = %.3f, abs. error = %.3e, rel. error = %.3e, Func. eval. = %d"
                    % (x, absolute_error, relative_error, number_of_function_evaluations)
                )
            relative_error_array[i] = relative_error
            feval_array[i] = number_of_function_evaluations

        average_relative_error = np.mean(relative_error_array)
        average_feval = np.mean(feval_array)
        if verbose:
            print("Average error =", average_relative_error)
            print("Average number of function evaluations =", average_feval)
        return average_relative_error, average_feval









.. GENERATED FROM PYTHON SOURCE LINES 126-137

.. code-block:: Python

    print("+ Benchmark on several points")
    number_of_test_points = 100
    test_points = np.linspace(0.01, 12.2, number_of_test_points)
    kmin = 1.0e-16
    kmax = 1.0e-1
    benchmark = nd.ExponentialDerivativeBenchmark()
    average_relative_error, average_feval = benchmark_method(
        benchmark.function, benchmark.first_derivative, test_points, kmin, kmax, True
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    + Benchmark on several points
    x = 0.010
    x = 0.010, abs. error = 1.015e-07, rel. error = 1.005e-07, Func. eval. = 16
    x = 0.133
    x = 0.133, abs. error = 1.076e-07, rel. error = 9.418e-08, Func. eval. = 16
    x = 0.256
    x = 0.256, abs. error = 1.140e-07, rel. error = 8.826e-08, Func. eval. = 16
    x = 0.379
    x = 0.379, abs. error = 1.207e-07, rel. error = 8.261e-08, Func. eval. = 16
    x = 0.503
    x = 0.503, abs. error = 1.283e-07, rel. error = 7.760e-08, Func. eval. = 16
    x = 0.626
    x = 0.626, abs. error = 1.378e-07, rel. error = 7.373e-08, Func. eval. = 16
    x = 0.749
    x = 0.749, abs. error = 1.451e-07, rel. error = 6.863e-08, Func. eval. = 16
    x = 0.872
    x = 0.872, abs. error = 1.536e-07, rel. error = 6.424e-08, Func. eval. = 16
    x = 0.995
    x = 0.995, abs. error = 1.638e-07, rel. error = 6.055e-08, Func. eval. = 16
    x = 1.118
    x = 1.118, abs. error = 1.744e-07, rel. error = 5.702e-08, Func. eval. = 16
    x = 1.241
    x = 1.241, abs. error = 1.850e-07, rel. error = 5.345e-08, Func. eval. = 16
    x = 1.364
    x = 1.364, abs. error = 1.993e-07, rel. error = 5.093e-08, Func. eval. = 16
    x = 1.488
    x = 1.488, abs. error = 2.109e-07, rel. error = 4.764e-08, Func. eval. = 16
    x = 1.611
    x = 1.611, abs. error = 2.245e-07, rel. error = 4.483e-08, Func. eval. = 16
    x = 1.734
    x = 1.734, abs. error = 2.387e-07, rel. error = 4.216e-08, Func. eval. = 16
    x = 1.857
    x = 1.857, abs. error = 2.571e-07, rel. error = 4.015e-08, Func. eval. = 16
    x = 1.980
    x = 1.980, abs. error = 2.701e-07, rel. error = 3.729e-08, Func. eval. = 14
    x = 2.103
    x = 2.103, abs. error = 2.811e-07, rel. error = 3.431e-08, Func. eval. = 14
    x = 2.226
    x = 2.226, abs. error = 2.986e-07, rel. error = 3.223e-08, Func. eval. = 14
    x = 2.349
    x = 2.349, abs. error = 3.262e-07, rel. error = 3.113e-08, Func. eval. = 14
    x = 2.473
    x = 2.473, abs. error = 3.210e-07, rel. error = 2.708e-08, Func. eval. = 14
    x = 2.596
    x = 2.596, abs. error = 3.549e-07, rel. error = 2.647e-08, Func. eval. = 14
    x = 2.719
    x = 2.719, abs. error = 3.951e-07, rel. error = 2.606e-08, Func. eval. = 14
    x = 2.842
    x = 2.842, abs. error = 4.541e-07, rel. error = 2.648e-08, Func. eval. = 14
    x = 2.965
    x = 2.965, abs. error = 4.010e-07, rel. error = 2.067e-08, Func. eval. = 14
    x = 3.088
    x = 3.088, abs. error = 4.664e-07, rel. error = 2.126e-08, Func. eval. = 14
    x = 3.211
    x = 3.211, abs. error = 5.287e-07, rel. error = 2.131e-08, Func. eval. = 14
    x = 3.335
    x = 3.335, abs. error = 5.142e-07, rel. error = 1.832e-08, Func. eval. = 14
    x = 3.458
    x = 3.458, abs. error = 5.625e-07, rel. error = 1.772e-08, Func. eval. = 14
    x = 3.581
    x = 3.581, abs. error = 5.861e-07, rel. error = 1.633e-08, Func. eval. = 14
    x = 3.704
    x = 3.704, abs. error = 6.227e-07, rel. error = 1.533e-08, Func. eval. = 14
    x = 3.827
    x = 3.827, abs. error = 5.988e-07, rel. error = 1.304e-08, Func. eval. = 14
    x = 3.950
    x = 3.950, abs. error = 6.169e-07, rel. error = 1.188e-08, Func. eval. = 14
    x = 4.073
    x = 4.073, abs. error = 5.267e-07, rel. error = 8.965e-09, Func. eval. = 14
    x = 4.196
    x = 4.196, abs. error = 6.563e-07, rel. error = 9.876e-09, Func. eval. = 14
    x = 4.320
    x = 4.320, abs. error = 1.200e-06, rel. error = 1.597e-08, Func. eval. = 14
    x = 4.443
    x = 4.443, abs. error = 4.694e-07, rel. error = 5.522e-09, Func. eval. = 14
    x = 4.566
    x = 4.566, abs. error = 1.462e-06, rel. error = 1.520e-08, Func. eval. = 14
    x = 4.689
    x = 4.689, abs. error = 1.083e-06, rel. error = 9.958e-09, Func. eval. = 14
    x = 4.812
    x = 4.812, abs. error = 8.661e-07, rel. error = 7.042e-09, Func. eval. = 14
    x = 4.935
    x = 4.935, abs. error = 1.322e-06, rel. error = 9.506e-09, Func. eval. = 14
    x = 5.058
    x = 5.058, abs. error = 3.006e-07, rel. error = 1.910e-09, Func. eval. = 14
    x = 5.182
    x = 5.182, abs. error = 1.928e-06, rel. error = 1.084e-08, Func. eval. = 14
    x = 5.305
    x = 5.305, abs. error = 4.152e-07, rel. error = 2.063e-09, Func. eval. = 14
    x = 5.428
    x = 5.428, abs. error = 5.907e-07, rel. error = 2.595e-09, Func. eval. = 14
    x = 5.551
    x = 5.551, abs. error = 1.636e-07, rel. error = 6.354e-10, Func. eval. = 14
    x = 5.674
    x = 5.674, abs. error = 3.973e-06, rel. error = 1.364e-08, Func. eval. = 14
    x = 5.797
    x = 5.797, abs. error = 3.665e-06, rel. error = 1.113e-08, Func. eval. = 14
    x = 5.920
    x = 5.920, abs. error = 3.453e-07, rel. error = 9.269e-10, Func. eval. = 14
    x = 6.043
    x = 6.043, abs. error = 1.846e-07, rel. error = 4.380e-10, Func. eval. = 14
    x = 6.167
    x = 6.167, abs. error = 3.491e-06, rel. error = 7.327e-09, Func. eval. = 14
    x = 6.290
    x = 6.290, abs. error = 6.761e-06, rel. error = 1.254e-08, Func. eval. = 14
    x = 6.413
    x = 6.413, abs. error = 1.562e-06, rel. error = 2.563e-09, Func. eval. = 14
    x = 6.536
    x = 6.536, abs. error = 1.011e-05, rel. error = 1.466e-08, Func. eval. = 14
    x = 6.659
    x = 6.659, abs. error = 2.440e-06, rel. error = 3.128e-09, Func. eval. = 16
    x = 6.782
    x = 6.782, abs. error = 9.517e-06, rel. error = 1.079e-08, Func. eval. = 16
    x = 6.905
    x = 6.905, abs. error = 1.211e-05, rel. error = 1.214e-08, Func. eval. = 16
    x = 7.028
    x = 7.028, abs. error = 5.592e-06, rel. error = 4.956e-09, Func. eval. = 16
    x = 7.152
    x = 7.152, abs. error = 1.543e-05, rel. error = 1.209e-08, Func. eval. = 16
    x = 7.275
    x = 7.275, abs. error = 2.078e-05, rel. error = 1.440e-08, Func. eval. = 16
    x = 7.398
    x = 7.398, abs. error = 3.271e-06, rel. error = 2.004e-09, Func. eval. = 16
    x = 7.521
    x = 7.521, abs. error = 2.470e-05, rel. error = 1.338e-08, Func. eval. = 16
    x = 7.644
    x = 7.644, abs. error = 1.042e-05, rel. error = 4.989e-09, Func. eval. = 16
    x = 7.767
    x = 7.767, abs. error = 4.426e-05, rel. error = 1.874e-08, Func. eval. = 16
    x = 7.890
    x = 7.890, abs. error = 6.728e-05, rel. error = 2.518e-08, Func. eval. = 16
    x = 8.014
    x = 8.014, abs. error = 2.587e-04, rel. error = 8.562e-08, Func. eval. = 10
    x = 8.137
    x = 8.137, abs. error = 5.656e-06, rel. error = 1.655e-09, Func. eval. = 16
    x = 8.260
    x = 8.260, abs. error = 9.381e-05, rel. error = 2.427e-08, Func. eval. = 16
    x = 8.383
    x = 8.383, abs. error = 3.028e-05, rel. error = 6.925e-09, Func. eval. = 10
    x = 8.506
    x = 8.506, abs. error = 1.650e-04, rel. error = 3.336e-08, Func. eval. = 16
    x = 8.629
    x = 8.629, abs. error = 6.278e-05, rel. error = 1.123e-08, Func. eval. = 16
    x = 8.752
    x = 8.752, abs. error = 6.496e-05, rel. error = 1.027e-08, Func. eval. = 16
    x = 8.875
    x = 8.875, abs. error = 4.684e-05, rel. error = 6.548e-09, Func. eval. = 16
    x = 8.999
    x = 8.999, abs. error = 9.689e-04, rel. error = 1.197e-07, Func. eval. = 10
    x = 9.122
    x = 9.122, abs. error = 3.870e-04, rel. error = 4.229e-08, Func. eval. = 16
    x = 9.245
    x = 9.245, abs. error = 2.968e-03, rel. error = 2.867e-07, Func. eval. = 10
    x = 9.368
    x = 9.368, abs. error = 4.797e-04, rel. error = 4.098e-08, Func. eval. = 10
    x = 9.491
    x = 9.491, abs. error = 5.332e-04, rel. error = 4.027e-08, Func. eval. = 16
    x = 9.614
    x = 9.614, abs. error = 5.726e-06, rel. error = 3.823e-10, Func. eval. = 16
    x = 9.737
    x = 9.737, abs. error = 6.204e-05, rel. error = 3.662e-09, Func. eval. = 10
    x = 9.861
    x = 9.861, abs. error = 9.845e-04, rel. error = 5.139e-08, Func. eval. = 16
    x = 9.984
    x = 9.984, abs. error = 3.200e-04, rel. error = 1.477e-08, Func. eval. = 16
    x = 10.107
    x = 10.107, abs. error = 3.965e-03, rel. error = 1.618e-07, Func. eval. = 10
    x = 10.230
    x = 10.230, abs. error = 1.211e-03, rel. error = 4.369e-08, Func. eval. = 10
    x = 10.353
    x = 10.353, abs. error = 1.435e-03, rel. error = 4.577e-08, Func. eval. = 16
    x = 10.476
    x = 10.476, abs. error = 4.572e-03, rel. error = 1.289e-07, Func. eval. = 10
    x = 10.599
    x = 10.599, abs. error = 2.372e-03, rel. error = 5.915e-08, Func. eval. = 16
    x = 10.722
    x = 10.722, abs. error = 3.145e-03, rel. error = 6.933e-08, Func. eval. = 16
    x = 10.846
    x = 10.846, abs. error = 2.912e-03, rel. error = 5.676e-08, Func. eval. = 16
    x = 10.969
    x = 10.969, abs. error = 2.918e-03, rel. error = 5.029e-08, Func. eval. = 18
    x = 11.092
    x = 11.092, abs. error = 1.703e-02, rel. error = 2.594e-07, Func. eval. = 18
    x = 11.215
    x = 11.215, abs. error = 2.557e-02, rel. error = 3.445e-07, Func. eval. = 10
    x = 11.338
    x = 11.338, abs. error = 3.296e-03, rel. error = 3.926e-08, Func. eval. = 10
    x = 11.461
    x = 11.461, abs. error = 1.972e-03, rel. error = 2.077e-08, Func. eval. = 20
    x = 11.584
    x = 11.584, abs. error = 1.909e-02, rel. error = 1.778e-07, Func. eval. = 10
    x = 11.707
    x = 11.707, abs. error = 4.942e-03, rel. error = 4.069e-08, Func. eval. = 18
    x = 11.831
    x = 11.831, abs. error = 4.573e-02, rel. error = 3.329e-07, Func. eval. = 10
    x = 11.954
    x = 11.954, abs. error = 9.928e-03, rel. error = 6.389e-08, Func. eval. = 20
    x = 12.077
    x = 12.077, abs. error = 4.638e-02, rel. error = 2.639e-07, Func. eval. = 20
    x = 12.200
    x = 12.200, abs. error = 1.436e-02, rel. error = 7.224e-08, Func. eval. = 20
    Average error = 4.7395144159174744e-08
    Average number of function evaluations = 14.68




.. GENERATED FROM PYTHON SOURCE LINES 138-147

.. code-block:: Python

    function_list = [
        [nd.ExponentialDerivativeBenchmark(), 1.0e-16, 1.0e-1],
        [nd.LogarithmicDerivativeBenchmark(), 1.0e-16, 1.0e-3],
        [nd.SquareRootDerivativeBenchmark(), 1.0e-16, 1.0e-3],
        [nd.AtanDerivativeBenchmark(), 1.0e-16, 1.0e0],
        [nd.SinDerivativeBenchmark(), 1.0e-16, 1.0e0],
        [nd.ScaledExponentialDerivativeBenchmark(), 1.0e-10, 1.0e5],
    ]








.. GENERATED FROM PYTHON SOURCE LINES 148-149

Benchmark GillMurraySaundersWright

.. GENERATED FROM PYTHON SOURCE LINES 149-191

.. code-block:: Python

    number_of_test_points = 100
    test_points = np.linspace(0.01, 12.2, number_of_test_points)
    data = []
    number_of_functions = len(function_list)
    average_relative_error_list = []
    average_feval_list = []
    for i in range(number_of_functions):
        benchmark, kmin, kmax = function_list[i]
        name = benchmark.name
        average_relative_error, average_feval = benchmark_method(
            benchmark.function,
            benchmark.first_derivative,
            test_points,
            kmin,
            kmax,
        )
        average_relative_error_list.append(average_relative_error)
        average_feval_list.append(average_feval)
        data.append(
            (
                name,
                kmin,
                kmax,
                average_relative_error,
                average_feval,
            )
        )
    data.append(
        [
            "Average",
            "-",
            "-",
            np.mean(average_relative_error_list),
            np.mean(average_feval_list),
        ]
    )
    tabulate.tabulate(
        data,
        headers=["Name", "kmin", "kmax", "Average error", "Average func. eval"],
        tablefmt="html",
    )






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
    <thead>
    <tr><th>Name      </th><th>kmin  </th><th>kmax    </th><th style="text-align: right;">  Average error</th><th style="text-align: right;">  Average func. eval</th></tr>
    </thead>
    <tbody>
    <tr><td>exp       </td><td>1e-16 </td><td>0.1     </td><td style="text-align: right;">    4.73951e-08</td><td style="text-align: right;">             14.68  </td></tr>
    <tr><td>log       </td><td>1e-16 </td><td>0.001   </td><td style="text-align: right;">    1.0001e-07 </td><td style="text-align: right;">             14.32  </td></tr>
    <tr><td>sqrt      </td><td>1e-16 </td><td>0.001   </td><td style="text-align: right;">    7.2598e-08 </td><td style="text-align: right;">             14.3   </td></tr>
    <tr><td>atan      </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">    3.2877e-07 </td><td style="text-align: right;">             14.4   </td></tr>
    <tr><td>sin       </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">    3.27189e-07</td><td style="text-align: right;">             14.48  </td></tr>
    <tr><td>scaled exp</td><td>1e-10 </td><td>100000.0</td><td style="text-align: right;">    9.99929e-08</td><td style="text-align: right;">             16     </td></tr>
    <tr><td>Average   </td><td>-     </td><td>-       </td><td style="text-align: right;">    1.62659e-07</td><td style="text-align: right;">             14.6967</td></tr>
    </tbody>
    </table>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.032 seconds)


.. _sphx_glr_download_auto_example_plot_gill_murray_saunders_wright_benchmark.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gill_murray_saunders_wright_benchmark.ipynb <plot_gill_murray_saunders_wright_benchmark.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gill_murray_saunders_wright_benchmark.py <plot_gill_murray_saunders_wright_benchmark.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_gill_murray_saunders_wright_benchmark.zip <plot_gill_murray_saunders_wright_benchmark.zip>`
