
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_dumontet_vignes_benchmark.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_plot_dumontet_vignes_benchmark.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_dumontet_vignes_benchmark.py:


Benchmark Dumontet & Vignes method
==================================

The goal of this example is to benchmark the :class:`~numericalderivative.DumontetVignes`
on a collection of test problems.
These problems are created by the :meth:`~numericalderivative.build_benchmark()` 
static method, which returns a list of problems.

References
----------
- Dumontet, J., & Vignes, J. (1977). Détermination du pas optimal dans le calcul des dérivées sur ordinateur. RAIRO. Analyse numérique, 11 (1), 13-25.

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: Python

    import numpy as np
    import tabulate
    import numericalderivative as nd








.. GENERATED FROM PYTHON SOURCE LINES 23-25

The next class benchmarks the (Dumontet & Vignes, 1977) algorithm
on a given problem and a collection of test points.

.. GENERATED FROM PYTHON SOURCE LINES 25-78

.. code-block:: Python



    class DumontetVignesMethod:
        def __init__(self, relative_precision, kmin, kmax):
            """
            Create a Dumontet & Vignes method to compute the approximate first derivative

            Parameters
            ----------
            relative_precision : float, > 0, optional
                The relative precision of evaluation of f.
            kmin : float, kmin > 0
                A minimum bound for the finite difference step of the third derivative.
                If no value is provided, the default is to compute the smallest
                possible kmin using number_of_digits and x.
            kmax : float, kmax > kmin > 0
                A maximum bound for the finite difference step of the third derivative.
                If no value is provided, the default is to compute the largest
                possible kmax using number_of_digits and x.
            """
            self.relative_precision = relative_precision
            self.kmin = kmin
            self.kmax = kmax

        def compute_first_derivative(self, function, x):
            """
            Compute the first derivative using Dumontet & Vignes

            Parameters
            ----------
            function : function
                The function
            x : float
                The test point

            Returns
            -------
            f_prime_approx : float
                The approximate value of the first derivative of the function at point x
            number_of_function_evaluations : int
                The number of function evaluations.
            """
            algorithm = nd.DumontetVignes(
                function,
                x,
                relative_precision=self.relative_precision,
            )
            step, _ = algorithm.compute_step(kmin=self.kmin, kmax=self.kmax)
            f_prime_approx = algorithm.compute_first_derivative(step)
            number_of_function_evaluations = algorithm.get_number_of_function_evaluations()
            return f_prime_approx, number_of_function_evaluations









.. GENERATED FROM PYTHON SOURCE LINES 79-81

The next example computes the approximate derivative on the
:class:`~numericalderivative.ExponentialProblem` on a set of points.

.. GENERATED FROM PYTHON SOURCE LINES 83-102

.. code-block:: Python

    number_of_test_points = 20
    problem = nd.ExponentialProblem()
    interval = problem.get_interval()
    test_points = np.linspace(interval[0], interval[1], number_of_test_points)
    kmin = 1.0e-9
    kmax = 1.0e0
    relative_precision = 1.0e-14
    method = DumontetVignesMethod(relative_precision, kmin, kmax)
    average_relative_error, average_feval, data = nd.benchmark_method(
        problem.get_function(),
        problem.get_first_derivative(),
        test_points,
        method.compute_first_derivative,
        verbose=False,
    )
    print("Average rel. error =", average_relative_error)
    print("Average number of function evaluations =", average_feval)
    tabulate.tabulate(data, headers=["x", "Rel. err.", "F. Eval."], tablefmt="html")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Average rel. error = 1.5969358861225037e-10
    Average number of function evaluations = 79.0


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
    <thead>
    <tr><th style="text-align: right;">        x</th><th style="text-align: right;">  Rel. err.</th><th style="text-align: right;">  F. Eval.</th></tr>
    </thead>
    <tbody>
    <tr><td style="text-align: right;"> 0       </td><td style="text-align: right;">1.61527e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 0.631579</td><td style="text-align: right;">1.60234e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 1.26316 </td><td style="text-align: right;">1.59545e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 1.89474 </td><td style="text-align: right;">1.60987e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 2.52632 </td><td style="text-align: right;">1.59693e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 3.15789 </td><td style="text-align: right;">1.61137e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 3.78947 </td><td style="text-align: right;">1.63038e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 4.42105 </td><td style="text-align: right;">1.61623e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 5.05263 </td><td style="text-align: right;">1.59493e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 5.68421 </td><td style="text-align: right;">1.62518e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 6.31579 </td><td style="text-align: right;">1.61635e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 6.94737 </td><td style="text-align: right;">1.60672e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 7.57895 </td><td style="text-align: right;">1.60882e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 8.21053 </td><td style="text-align: right;">1.56856e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 8.84211 </td><td style="text-align: right;">1.56961e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;"> 9.47368 </td><td style="text-align: right;">1.57521e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;">10.1053  </td><td style="text-align: right;">1.58586e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;">10.7368  </td><td style="text-align: right;">1.58525e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;">11.3684  </td><td style="text-align: right;">1.57334e-10</td><td style="text-align: right;">        79</td></tr>
    <tr><td style="text-align: right;">12       </td><td style="text-align: right;">1.55104e-10</td><td style="text-align: right;">        79</td></tr>
    </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 103-104

Map from the problem name to kmax

.. GENERATED FROM PYTHON SOURCE LINES 106-126

.. code-block:: Python

    kmax_map = {
        "polynomial": 1.0,
        "inverse": 1.0e0,
        "exp": 1.0e-1,
        "log": 1.0e-3,  # x > 0
        "sqrt": 1.0e-3,  # x > 0
        "atan": 1.0e0,
        "sin": 1.0e0,
        "scaled exp": 1.0e5,
        "GMSW": 1.0e0,
        "SXXN1": 1.0e0,
        "SXXN2": 1.0e0,  # Fails
        "SXXN3": 1.0e0,
        "SXXN4": 1.0e0,
        "Oliver1": 1.0e0,
        "Oliver2": 1.0e0,
        "Oliver3": 1.0e-3,
    }









.. GENERATED FROM PYTHON SOURCE LINES 127-129

Benchmark the :class:`~numericalderivative.DumontetVignes` class
on a collection of problems.

.. GENERATED FROM PYTHON SOURCE LINES 131-185

.. code-block:: Python

    number_of_test_points = 100
    relative_precision = 1.0e-14
    data = []
    function_list = nd.build_benchmark()
    number_of_functions = len(function_list)
    average_relative_error_list = []
    average_feval_list = []
    for i in range(number_of_functions):
        problem = function_list[i]
        name = problem.get_name()
        kmax = kmax_map[name]
        kmin = 1.0e-16 * kmax
        function = problem.get_function()
        first_derivative = problem.get_first_derivative()
        interval = problem.get_interval()
        test_points = np.linspace(interval[0], interval[1], number_of_test_points)
        print(f"Function #{i}, {name}")
        if name == "polynomial":
            # Skip this problem (see below)
            continue
        method = DumontetVignesMethod(relative_precision, kmin, kmax)
        average_relative_error, average_feval, _ = nd.benchmark_method(
            function,
            first_derivative,
            test_points,
            method.compute_first_derivative,
            verbose=False,
        )
        average_relative_error_list.append(average_relative_error)
        average_feval_list.append(average_feval)
        data.append(
            (
                name,
                kmin,
                kmax,
                average_relative_error,
                average_feval,
            )
        )
    data.append(
        [
            "Average",
            "-",
            "-",
            np.nanmean(average_relative_error_list),
            np.nanmean(average_feval_list),
        ]
    )

    tabulate.tabulate(
        data,
        headers=["Name", "kmin", "kmax", "Average rel. error", "Average func. eval"],
        tablefmt="html",
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Function #0, polynomial
    Function #1, inverse
    Function #2, exp
    Function #3, log
    Function #4, sqrt
    Function #5, atan
    Function #6, sin
    Function #7, scaled exp
    Function #8, GMSW
    Function #9, SXXN1
    Function #10, SXXN2
    Function #11, SXXN3
    Function #12, SXXN4
    Function #13, Oliver1
    Function #14, Oliver2
    Function #15, Oliver3


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
    <thead>
    <tr><th>Name      </th><th>kmin  </th><th>kmax    </th><th style="text-align: right;">  Average rel. error</th><th style="text-align: right;">  Average func. eval</th></tr>
    </thead>
    <tbody>
    <tr><td>inverse   </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         2.92323e-10</td><td style="text-align: right;">             68.16  </td></tr>
    <tr><td>exp       </td><td>1e-17 </td><td>0.1     </td><td style="text-align: right;">         1.61537e-10</td><td style="text-align: right;">             63     </td></tr>
    <tr><td>log       </td><td>1e-19 </td><td>0.001   </td><td style="text-align: right;">         2.77694e-10</td><td style="text-align: right;">             25.4   </td></tr>
    <tr><td>sqrt      </td><td>1e-19 </td><td>0.001   </td><td style="text-align: right;">         2.32082e-10</td><td style="text-align: right;">             23.2   </td></tr>
    <tr><td>atan      </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         1.14667e-09</td><td style="text-align: right;">             63.88  </td></tr>
    <tr><td>sin       </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         2.72551e-10</td><td style="text-align: right;">             73.96  </td></tr>
    <tr><td>scaled exp</td><td>1e-11 </td><td>100000.0</td><td style="text-align: right;">         1.6088e-10 </td><td style="text-align: right;">             63     </td></tr>
    <tr><td>GMSW      </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         1.53806e-10</td><td style="text-align: right;">             82.2   </td></tr>
    <tr><td>SXXN1     </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         2.03436e-08</td><td style="text-align: right;">             73     </td></tr>
    <tr><td>SXXN2     </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         1.66078e-10</td><td style="text-align: right;">            103     </td></tr>
    <tr><td>SXXN3     </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         1.28154e-10</td><td style="text-align: right;">             69.56  </td></tr>
    <tr><td>SXXN4     </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         9.73696e-11</td><td style="text-align: right;">             67.88  </td></tr>
    <tr><td>Oliver1   </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         1.60721e-10</td><td style="text-align: right;">             87     </td></tr>
    <tr><td>Oliver2   </td><td>1e-16 </td><td>1.0     </td><td style="text-align: right;">         1.97439e-10</td><td style="text-align: right;">             86.36  </td></tr>
    <tr><td>Oliver3   </td><td>1e-19 </td><td>0.001   </td><td style="text-align: right;">         1.12381e-10</td><td style="text-align: right;">             25.56  </td></tr>
    <tr><td>Average   </td><td>-     </td><td>-       </td><td style="text-align: right;">         1.59355e-09</td><td style="text-align: right;">             65.0107</td></tr>
    </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 186-190

Notice that the method does not perform correctly for the :class:`~numericalderivative.PolynomialProblem`.
Indeed, this function as a zero third derivative.
This produces a L ratio which is negative, so that there is no value of the
step :math:`k` such that the condition is satisfied.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.186 seconds)


.. _sphx_glr_download_auto_example_plot_dumontet_vignes_benchmark.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_dumontet_vignes_benchmark.ipynb <plot_dumontet_vignes_benchmark.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_dumontet_vignes_benchmark.py <plot_dumontet_vignes_benchmark.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_dumontet_vignes_benchmark.zip <plot_dumontet_vignes_benchmark.zip>`
