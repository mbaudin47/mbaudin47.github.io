
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_dumontet_vignes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_plot_dumontet_vignes.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_dumontet_vignes.py:


Experiments with Dumontet & Vignes method
=========================================

References
----------
- Dumontet, J., & Vignes, J. (1977). Détermination du pas optimal dans le calcul des dérivées sur ordinateur. RAIRO. Analyse numérique, 11 (1), 13-25.

.. GENERATED FROM PYTHON SOURCE LINES 14-20

.. code-block:: Python

    import numpy as np
    import pylab as pl
    import numericalderivative as nd
    import sys









.. GENERATED FROM PYTHON SOURCE LINES 21-134

.. code-block:: Python

    def compute_ell(function, x, k, relative_precision):
        algorithm = nd.DumontetVignes(function, x, relative_precision=relative_precision)
        ell = algorithm.compute_ell(k)
        return ell


    def compute_f3_inf_sup(function, x, k, relative_precision):
        algorithm = nd.DumontetVignes(function, x, relative_precision=relative_precision)
        ell, f3inf, f3sup = algorithm.compute_ell(k)
        return f3inf, f3sup


    def plot_step_sensitivity(
        x,
        name,
        function,
        function_derivative,
        function_third_derivative,
        step_array,
        iteration_maximum=53,
        relative_precision=1.0e-15,
        kmin=None,
        kmax=None,
    ):
        """
        Compute the approximate derivative using central F.D. formula.
        Create a plot representing the absolute error depending on step.
        Plot the approximately optimal step computed by DumontetVignes.

        Parameters
        ----------
        x : float
            The input point
        name : str
            The name of the problem
        function : function
            The function.
        function_derivative : function
            The exact first derivative of the function.
        function_third_derivative : function
            The exact third derivative of the function.
        step_array : array(n_points)
            The array of steps to consider
        iteration_maximum : int
            The maximum number of iterations in DumontetVignes
        relative_precision : float, > 0
            The relative precision of the function evaluation
        kmin : float, kmin > 0
            A minimum bound for k. The default is None.
            If no value is provided, the default is to compute the smallest
            possible kmin using number_of_digits and x.
        kmax : float, kmax > kmin > 0
            A maximum bound for k. The default is None.
            If no value is provided, the default is to compute the largest
            possible kmax using number_of_digits and x.
        """
        print("+ ", name)
        # 1. Plot the error vs h
        algorithm = nd.DumontetVignes(function, x, verbose=True)
        number_of_points = len(step_array)
        error_array = np.zeros((number_of_points))
        for i in range(number_of_points):
            f_prime_approx = algorithm.compute_first_derivative(step_array[i])
            error_array[i] = abs(f_prime_approx - function_derivative(x))

        # 2. Algorithm to detect h*
        algorithm = nd.DumontetVignes(function, x, relative_precision=relative_precision)
        print("Exact f'''(x) = %.3e" % (function_third_derivative(x)))
        estim_step, _ = algorithm.compute_step(
            iteration_maximum=iteration_maximum,
            markdown=False,
            kmin=kmin,
            kmax=kmax,
        )
        fprime = algorithm.compute_first_derivative(estim_step)
        number_of_function_evaluations = algorithm.get_number_of_function_evaluations()
        print("Function evaluations =", number_of_function_evaluations)
        print("Estim. derivative = %.3e" % (fprime))
        print("Exact. derivative = %.3e" % (function_derivative(x)))
        f_prime_approx = algorithm.compute_first_derivative(estim_step)
        absolute_error = abs(f_prime_approx - function_derivative(x))
        print("Exact abs. error  = %.3e" % (absolute_error))
        print("Exact rel. error  = %.3e" % (absolute_error / abs(function_derivative(x))))
        # Compute exact step
        absolute_precision = abs(function(x) * relative_precision)
        third_derivative_value = function_third_derivative(x)
        optimal_step, optimal_error = nd.FirstDerivativeCentral.compute_step(
            third_derivative_value, absolute_precision
        )
        print("Exact step     = %.3e" % (optimal_step))
        print("Estimated step = %.3e" % (estim_step))
        print("Optimal abs. error = %.3e" % (optimal_error))
        print("Optimal rel. error = %.3e" % (optimal_error / abs(function_derivative(x))))

        minimum_error = np.nanmin(error_array)
        maximum_error = np.nanmax(error_array)

        pl.figure()
        pl.plot(step_array, error_array)
        pl.plot(
            [estim_step] * 2, [minimum_error, maximum_error], "--", label=r"$\tilde{h}$"
        )
        pl.plot(optimal_step, optimal_error, "o", label=r"$h^\star$")
        pl.title("Finite difference for %s" % (name))
        pl.xlabel("h")
        pl.ylabel("Error")
        pl.xscale("log")
        pl.yscale("log")
        pl.legend(bbox_to_anchor=(1.1, 1.0))
        pl.tight_layout()
        return









.. GENERATED FROM PYTHON SOURCE LINES 135-192

.. code-block:: Python

    def plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=None,
        kmax=None,
        y_logscale=False,
        plot_L_constants=False,
    ):
        """Plot the ell ratio depending on the step size.

        This ell ratio is used in DumontetVignes."""
        ell_1 = 1.0 / 15.0  # Eq. 34, fixed
        ell_2 = 1.0 / 2.0
        ell_3 = 1.0 / ell_2
        ell_4 = 1.0 / ell_1

        if kmin is None:
            print("Set default kmin")
            kmin = x * 2 ** (-number_of_digits + 1)  # Eq. 26
        if kmax is None:
            print("Set default kmax")
            kmax = x * 2 ** (number_of_digits - 1)
        k_array = np.logspace(np.log10(kmin), np.log10(kmax), number_of_points)
        ell_array = np.zeros((number_of_points))
        for i in range(number_of_points):
            ell_array[i], f3inf, f3sup = compute_ell(
                function, x, k_array[i], relative_precision
            )

        pl.figure()
        pl.plot(k_array, ell_array)
        if plot_L_constants:
            indices = np.isfinite(ell_array)
            maximum_finite_ell = np.max(ell_array[indices])
            print("Maximum L = %.3e" % (maximum_finite_ell))
            if maximum_finite_ell < 1.0:
                pl.plot(k_array, [ell_1] * number_of_points, "--", label="$L_1$")
                pl.plot(k_array, [ell_2] * number_of_points, ":", label="$L_2$")
            else:
                pl.plot(k_array, [ell_3] * number_of_points, ":", label="$L_3$")
                pl.plot(k_array, [ell_4] * number_of_points, "--", label="$L_4$")
            pl.legend()
        pl.title(f"{name}, x = {x:.2e}, p = {relative_precision:.2e}")
        pl.xlabel("k")
        pl.ylabel("L")
        pl.xscale("log")
        if y_logscale:
            pl.yscale("log")
        #
        pl.tight_layout()
        return









.. GENERATED FROM PYTHON SOURCE LINES 193-194

1. Exponential

.. GENERATED FROM PYTHON SOURCE LINES 194-215

.. code-block:: Python


    number_of_points = 1000
    relative_precision = 1.0e-15
    x = 1.0
    function = nd.ExponentialProblem().get_function()
    name = "exp"
    number_of_digits = 53
    kmin = 1.55e-5
    kmax = 1.0e-4
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
        plot_L_constants=True,
    )




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_001.png
   :alt: exp, x = 1.00e+00, p = 1.00e-15
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum L = 2.100e+01




.. GENERATED FROM PYTHON SOURCE LINES 216-237

.. code-block:: Python

    relative_precision = 1.0e-10
    x = 1.0
    function = nd.ExponentialProblem().get_function()
    name = "exp"
    number_of_digits = 53
    kmin = 5.0e-5
    kmax = 1.0e-2
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
        y_logscale=False,
        plot_L_constants=True,
    )
    pl.ylim(-20.0, 20.0)




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_002.png
   :alt: exp, x = 1.00e+00, p = 1.00e-10
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum L = 1.527e+02

    (-20.0, 20.0)



.. GENERATED FROM PYTHON SOURCE LINES 238-256

.. code-block:: Python

    relative_precision = 1.0e-14
    x = 1.0
    function = nd.ExponentialProblem().get_function()
    name = "exp"
    number_of_digits = 53
    kmin = 4.0e-5
    kmax = 1.0e-2
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
    )




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_003.png
   :alt: exp, x = 1.00e+00, p = 1.00e-14
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 257-275

.. code-block:: Python

    relative_precision = 1.0e-16
    x = 4.0
    function = nd.ExponentialProblem().get_function()
    name = "exp"
    number_of_digits = 53
    kmin = 1.0e-5
    kmax = 1.0e-2
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
    )




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_004.png
   :alt: exp, x = 4.00e+00, p = 1.00e-16
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 276-297

.. code-block:: Python

    relative_precision = 1.0e-14
    x = 4.0
    function = nd.ExponentialProblem().get_function()
    name = "exp"
    number_of_digits = 53
    kmin = 3.2e-5
    kmax = 1.0e-2
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
        y_logscale=False,
        plot_L_constants=True,
    )
    pl.ylim(-20.0, 20.0)




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_005.png
   :alt: exp, x = 4.00e+00, p = 1.00e-14
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum L = 2.420e+01

    (-20.0, 20.0)



.. GENERATED FROM PYTHON SOURCE LINES 298-304

.. code-block:: Python

    x = 4.0
    benchmark = nd.ExponentialProblem()
    function = benchmark.get_function()
    absolute_precision = sys.float_info.epsilon * function(x)
    print("absolute_precision = %.3e" % (absolute_precision))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    absolute_precision = 1.212e-14




.. GENERATED FROM PYTHON SOURCE LINES 305-328

.. code-block:: Python

    x = 4.1
    function = benchmark.get_function()
    relative_precision = sys.float_info.epsilon
    name = "exp"
    function_derivative = benchmark.get_first_derivative()
    function_third_derivative = benchmark.get_third_derivative()
    number_of_points = 1000
    step_array = np.logspace(-15.0, 0.0, number_of_points)
    kmin = 1.0e-5
    kmax = 1.0e-2
    plot_step_sensitivity(
        x,
        name,
        function,
        function_derivative,
        function_third_derivative,
        step_array,
        iteration_maximum=20,
        relative_precision=1.0e-15,
        kmin=kmin,
        kmax=kmax,
    )




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_006.png
   :alt: Finite difference for exp
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    +  exp
    Exact f'''(x) = 6.034e+01
    Function evaluations = 51
    Estim. derivative = 6.034e+01
    Exact. derivative = 6.034e+01
    Exact abs. error  = 2.298e-09
    Exact rel. error  = 3.808e-11
    Exact step     = 1.442e-05
    Estimated step = 1.453e-05
    Optimal abs. error = 6.276e-09
    Optimal rel. error = 1.040e-10




.. GENERATED FROM PYTHON SOURCE LINES 329-330

2. Scaled exponential

.. GENERATED FROM PYTHON SOURCE LINES 330-350

.. code-block:: Python


    x = 1.0
    relative_precision = 1.0e-14
    function = nd.ScaledExponentialProblem().get_function()
    name = "scaled exp"
    number_of_digits = 53
    kmin = 1.0e-1
    kmax = 1.0e2
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
        plot_L_constants=True,
    )




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_007.png
   :alt: scaled exp, x = 1.00e+00, p = 1.00e-14
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum L = 9.422e-01




.. GENERATED FROM PYTHON SOURCE LINES 351-374

.. code-block:: Python

    x = 1.0
    name = "scaled exp"
    benchmark = nd.ScaledExponentialProblem()
    function = benchmark.function
    function_derivative = benchmark.first_derivative
    function_third_derivative = benchmark.third_derivative
    number_of_points = 1000
    step_array = np.logspace(-7.0, 6.0, number_of_points)
    kmin = 1.0e-2
    kmax = 1.0e2
    relative_precision = 1.0e-15
    plot_step_sensitivity(
        x,
        name,
        function,
        function_derivative,
        function_third_derivative,
        step_array,
        relative_precision=relative_precision,
        kmin=kmin,
        kmax=kmax,
    )




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_008.png
   :alt: Finite difference for scaled exp
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    +  scaled exp
    Exact f'''(x) = -1.000e-18
    Function evaluations = 27
    Estim. derivative = -1.000e-06
    Exact. derivative = -1.000e-06
    Exact abs. error  = 3.431e-17
    Exact rel. error  = 3.431e-11
    Exact step     = 1.442e+01
    Estimated step = 1.438e+01
    Optimal abs. error = 1.040e-16
    Optimal rel. error = 1.040e-10




.. GENERATED FROM PYTHON SOURCE LINES 376-399

.. code-block:: Python

    print("+ 3. Square root")

    x = 1.0
    relative_precision = 1.0e-14
    function = nd.SquareRootProblem().get_function()
    name = "sqrt"
    number_of_digits = 53
    kmin = 4.3e-5
    kmax = 1.0e-4
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
        plot_L_constants=True,
    )
    pl.ylim(-20.0, 20.0)





.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_009.png
   :alt: sqrt, x = 1.00e+00, p = 1.00e-14
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    + 3. Square root
    Maximum L = 2.690e+02

    (-20.0, 20.0)



.. GENERATED FROM PYTHON SOURCE LINES 400-411

.. code-block:: Python

    x = 1.0
    k = 1.0e-3
    print("x = ", x)
    print("k = ", k)
    benchmark = nd.SquareRootProblem()
    finite_difference = nd.ThirdDerivativeCentral(benchmark.function, x)
    approx_f3d = finite_difference.compute(k)
    print("Approx. f''(x) = ", approx_f3d)
    exact_f3d = benchmark.third_derivative(x)
    print("Exact f''(x) = ", exact_f3d)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    x =  1.0
    k =  0.001
    Approx. f''(x) =  0.37500080818375636
    Exact f''(x) =  0.375




.. GENERATED FROM PYTHON SOURCE LINES 412-418

.. code-block:: Python

    relative_precision = 1.0e-14
    print("relative_precision = ", relative_precision)
    f3inf, f3sup = compute_f3_inf_sup(benchmark.function, x, k, relative_precision)
    print("f3inf = ", f3inf)
    print("f3sup = ", f3sup)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    relative_precision =  1e-14
    f3inf =  0.37497116522899887
    f3sup =  0.3750306731831188




.. GENERATED FROM PYTHON SOURCE LINES 419-427

.. code-block:: Python

    number_of_points = 1000
    k_array = np.logspace(-6.0, -1.0, number_of_points)
    error_array = np.zeros((number_of_points))
    for i in range(number_of_points):
        algorithm = nd.ThirdDerivativeCentral(benchmark.function, x)
        f2nde_approx = algorithm.compute(k_array[i])
        error_array[i] = abs(f2nde_approx - benchmark.third_derivative(x))








.. GENERATED FROM PYTHON SOURCE LINES 428-439

.. code-block:: Python

    pl.figure()
    pl.plot(k_array, error_array)
    pl.title("F. D. of 3de derivative for %s" % (name))
    pl.xlabel("k")
    pl.ylabel("Error")
    pl.xscale("log")
    pl.yscale("log")
    #
    pl.tight_layout()





.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_010.png
   :alt: F. D. of 3de derivative for sqrt
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 440-463

.. code-block:: Python

    number_of_points = 1000
    relative_precision = 1.0e-16
    k_array = np.logspace(-5.0, -4.0, number_of_points)
    f3_array = np.zeros((number_of_points, 3))
    function = benchmark.get_function()
    for i in range(number_of_points):
        f3inf, f3sup = compute_f3_inf_sup(function, x, k_array[i], relative_precision)
        algorithm = nd.ThirdDerivativeCentral(function, x)
        f3_approx = algorithm.compute(k_array[i])
        f3_array[i] = [f3inf, f3_approx, f3sup]

    pl.figure()
    pl.plot(k_array, f3_array[:, 0], ":", label="f3inf")
    pl.plot(k_array, f3_array[:, 1], "-", label="$D^{(3)}_f$")
    pl.plot(k_array, f3_array[:, 2], ":", label="f3sup")
    pl.title("F.D. of 3de derivative for %s" % (name))
    pl.xlabel("k")
    pl.xscale("log")
    pl.yscale("log")
    pl.legend(bbox_to_anchor=(1.0, 1.0))
    pl.tight_layout(pad=1.2)





.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_011.png
   :alt: F.D. of 3de derivative for sqrt
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 464-484

.. code-block:: Python

    x = 1.0e-2
    relative_precision = 1.0e-14
    function = benchmark.get_function()
    name = "sqrt"
    number_of_digits = 53
    kmin = 4.4e-7
    kmax = 1.0e-4
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
        plot_L_constants=True,
    )
    pl.ylim(-20.0, 20.0)




.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_012.png
   :alt: sqrt, x = 1.00e-02, p = 1.00e-14
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_012.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum L = 3.186e+01

    (-20.0, 20.0)



.. GENERATED FROM PYTHON SOURCE LINES 485-486

Search step

.. GENERATED FROM PYTHON SOURCE LINES 486-511

.. code-block:: Python

    x = 1.0e-2
    relative_precision = 1.0e-14
    kmin = 1.0e-8
    kmax = 1.0e-3
    verbose = True
    function = benchmark.get_function()
    algorithm = nd.DumontetVignes(
        function, x, relative_precision=relative_precision, verbose=verbose
    )
    h_optimal, _ = algorithm.compute_step(kmax=kmax)
    print("h optimal = %.3e" % (h_optimal))
    number_of_feval = algorithm.get_number_of_function_evaluations()
    print(f"number_of_feval = {number_of_feval}")
    f_prime_approx = algorithm.compute_first_derivative(h_optimal)
    feval = algorithm.get_number_of_function_evaluations()
    first_derivative = benchmark.get_first_derivative()
    absolute_error = abs(f_prime_approx - first_derivative(x))
    print("Abs. error = %.3e" % (absolute_error))

    ell_kmin, f3inf, f3sup = algorithm.compute_ell(kmin)
    print("L(kmin) = ", ell_kmin)
    ell_kmax, f3inf, f3sup = algorithm.compute_ell(kmax)
    print("L(kmax) = ", ell_kmax)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    x = 1.000e-02
    iteration_maximum = 50
    kmin =  2.220446049250313e-18
    kmax =  0.001
    L(kmin) =  -1.0186915887850467
    L(kmax) =  1.0000000001563647
    + Iteration = 0, kmin = 2.220e-18, kmax = 1.000e-03
      k = 5.000e-04, f3inf = 3.771e+04, f3sup = 3.771e+04, ell = 1.000e+00
      k is too large : reduce kmax
    + Iteration = 1, kmin = 2.220e-18, kmax = 5.000e-04
      k = 2.500e-04, f3inf = 3.755e+04, f3sup = 3.755e+04, ell = 1.000e+00
      k is too large : reduce kmax
    + Iteration = 2, kmin = 2.220e-18, kmax = 2.500e-04
      k = 1.250e-04, f3inf = 3.751e+04, f3sup = 3.751e+04, ell = 1.000e+00
      k is too large : reduce kmax
    + Iteration = 3, kmin = 2.220e-18, kmax = 1.250e-04
      k = 6.250e-05, f3inf = 3.750e+04, f3sup = 3.750e+04, ell = 1.000e+00
      k is too large : reduce kmax
    + Iteration = 4, kmin = 2.220e-18, kmax = 6.250e-05
      k = 3.125e-05, f3inf = 3.750e+04, f3sup = 3.750e+04, ell = 1.000e+00
      k is too large : reduce kmax
    + Iteration = 5, kmin = 2.220e-18, kmax = 3.125e-05
      k = 1.563e-05, f3inf = 3.750e+04, f3sup = 3.750e+04, ell = 1.000e+00
      k is too large : reduce kmax
    + Iteration = 6, kmin = 2.220e-18, kmax = 1.563e-05
      k = 7.813e-06, f3inf = 3.749e+04, f3sup = 3.751e+04, ell = 1.000e+00
      k is too large : reduce kmax
    + Iteration = 7, kmin = 2.220e-18, kmax = 7.813e-06
      k = 3.906e-06, f3inf = 3.745e+04, f3sup = 3.755e+04, ell = 1.003e+00
      k is too large : reduce kmax
    + Iteration = 8, kmin = 2.220e-18, kmax = 3.906e-06
      k = 1.953e-06, f3inf = 3.710e+04, f3sup = 3.790e+04, ell = 1.022e+00
      k is too large : reduce kmax
    + Iteration = 9, kmin = 2.220e-18, kmax = 1.953e-06
      k = 9.766e-07, f3inf = 3.427e+04, f3sup = 4.071e+04, ell = 1.188e+00
      k is too large : reduce kmax
    + Iteration = 10, kmin = 2.220e-18, kmax = 9.766e-07
      k = 4.883e-07, f3inf = 1.168e+04, f3sup = 6.318e+04, ell = 5.408e+00
      k is OK : stop
    h optimal = 4.311e-07
    number_of_feval = 53
    Abs. error = 1.151e-09
    L(kmin) =  -1.0
    L(kmax) =  1.0000000001563647




.. GENERATED FROM PYTHON SOURCE LINES 513-535

.. code-block:: Python

    print("+ 4. sin")
    x = 1.0
    relative_precision = 1.0e-14
    benchmark = nd.SinProblem()
    function = benchmark.function
    name = "sin"
    number_of_digits = 53
    kmin = 1.0e-5
    kmax = 1.0e-3
    plot_ell_ratio(
        name,
        function,
        x,
        number_of_points,
        number_of_digits,
        relative_precision,
        kmin=kmin,
        kmax=kmax,
        plot_L_constants=True,
    )





.. image-sg:: /auto_example/images/sphx_glr_plot_dumontet_vignes_013.png
   :alt: sin, x = 1.00e+00, p = 1.00e-14
   :srcset: /auto_example/images/sphx_glr_plot_dumontet_vignes_013.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    + 4. sin
    Maximum L = 9.999e-01




.. GENERATED FROM PYTHON SOURCE LINES 536-552

.. code-block:: Python

    x = 1.0
    k = 1.0e-3
    print("x = ", x)
    print("k = ", k)
    algorithm = nd.ThirdDerivativeCentral(benchmark.function, x)
    approx_f3d = algorithm.compute(k)
    print("Approx. f''(x) = ", approx_f3d)
    exact_f3d = benchmark.third_derivative(x)
    print("Exact f''(x) = ", exact_f3d)

    relative_precision = 1.0e-14
    print("relative_precision = ", relative_precision)
    f3inf, f3sup = compute_f3_inf_sup(benchmark.function, x, k, relative_precision)
    print("f3inf = ", f3inf)
    print("f3sup = ", f3sup)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    x =  1.0
    k =  0.001
    Approx. f''(x) =  -0.5403020253424984
    Exact f''(x) =  -0.5403023058681398
    relative_precision =  1e-14
    f3inf =  -0.5403273384274598
    f3sup =  -0.5402767122575369





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.134 seconds)


.. _sphx_glr_download_auto_example_plot_dumontet_vignes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_dumontet_vignes.ipynb <plot_dumontet_vignes.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_dumontet_vignes.py <plot_dumontet_vignes.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_dumontet_vignes.zip <plot_dumontet_vignes.zip>`
