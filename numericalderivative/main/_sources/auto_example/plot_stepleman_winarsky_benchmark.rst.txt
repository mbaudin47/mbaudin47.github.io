
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_stepleman_winarsky_benchmark.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_plot_stepleman_winarsky_benchmark.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_stepleman_winarsky_benchmark.py:


Benchmark Stepleman & Winarsky's method
=======================================

The goal of this example is to benchmark the :class:`~numericalderivative.SteplemanWinarsky`
class on a collection of test problems.
These problems are created by the :meth:`~numericalderivative.build_benchmark()` 
static method, which returns a list of problems.

References
----------
- Adaptive numerical differentiation
  R. S. Stepleman and N. D. Winarsky
  Journal: Math. Comp. 33 (1979), 1257-1264 

.. GENERATED FROM PYTHON SOURCE LINES 21-26

.. code-block:: Python

    import numpy as np
    import pylab as pl
    import tabulate
    import numericalderivative as nd








.. GENERATED FROM PYTHON SOURCE LINES 27-29

Compute the first derivative
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 31-33

The next function computes the approximate first derivative from finite
differences using Stepleman & Winarsky's method.

.. GENERATED FROM PYTHON SOURCE LINES 33-74

.. code-block:: Python



    class SteplemanWinarskyMethod:
        def __init__(self, initial_step):
            """
            Create a SteplemanWinarsky method to compute the approximate first derivative

            Parameters
            ----------
            initial_step : float, > 0
                A initial step.
            """
            self.initial_step = initial_step

        def compute_first_derivative(self, function, x):
            """
            Compute the first derivative using SteplemanWinarsky

            Parameters
            ----------
            function : function
                The function
            x : float
                The test point

            Returns
            -------
            f_prime_approx : float
                The approximate value of the first derivative of the function at point x
            number_of_function_evaluations : int
                The number of function evaluations.
            """
            algorithm = nd.SteplemanWinarsky(function, x)
            step, _ = algorithm.find_step(
                self.initial_step,
            )
            f_prime_approx = algorithm.compute_first_derivative(step)
            number_of_function_evaluations = algorithm.get_number_of_function_evaluations()
            return f_prime_approx, number_of_function_evaluations









.. GENERATED FROM PYTHON SOURCE LINES 75-76

The next script is a simple use of the :class:`~numericalderivative.SteplemanWinarsky` class.

.. GENERATED FROM PYTHON SOURCE LINES 78-117

.. code-block:: Python

    problem = nd.ExponentialProblem()
    print(problem)
    function = problem.get_function()
    x = problem.get_x()
    algorithm = nd.SteplemanWinarsky(
        function,
        x,
        verbose=True,
    )
    third_derivative = problem.get_third_derivative()
    third_derivative_value = third_derivative(x)
    optimal_step, absolute_error = nd.FirstDerivativeCentral.compute_step(
        third_derivative_value
    )
    print("Exact h* = %.3e" % (optimal_step))

    initialize = nd.SteplemanWinarskyInitialize(algorithm)
    initial_step, iterations = initialize.find_initial_step(
        1.0e-7,
        1.0e1,
    )
    print("Pas initial = ", initial_step, ", iterations = ", iterations)
    lost_digits = initialize.number_of_lost_digits(initial_step)
    print("lost_digits = ", lost_digits)
    initial_step = 1.0e1
    function = problem.get_function()
    first_derivative = problem.get_first_derivative()
    x = 1.0
    method = SteplemanWinarskyMethod(initial_step)
    f_prime_approx, number_of_function_evaluations = method.compute_first_derivative(
        function, x
    )
    f_prime_exact = first_derivative(x)
    absolute_error = abs(f_prime_approx - f_prime_exact)
    print(
        "x = %.3f, error = %.3e, Func. eval. = %d"
        % (x, absolute_error, number_of_function_evaluations)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    DerivativeBenchmarkProblem
    name = exp
    x = 1.0
    f(x) = 2.718281828459045
    f'(x) = 2.718281828459045
    f''(x) = 2.718281828459045
    f^(3)(x) = 2.718281828459045
    f^(4)(x) = 2.718281828459045
    f^(5)(x) = 2.718281828459045

    Exact h* = 4.797e-06
    Pas initial =  0.001 , iterations =  0
    lost_digits =  2.6989699319536102
    x = 1.000, error = 5.991e-11, Func. eval. = 28




.. GENERATED FROM PYTHON SOURCE LINES 118-120

Perform the benchmark
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 123-125

The next example computes the approximate derivative on the
:class:`~numericalderivative.ExponentialProblem` on a set of points.

.. GENERATED FROM PYTHON SOURCE LINES 127-143

.. code-block:: Python

    number_of_test_points = 20
    initial_step = 1.0e-1
    problem = nd.ExponentialProblem()
    function = problem.get_function()
    first_derivative = problem.get_first_derivative()
    interval = problem.get_interval()
    test_points = np.linspace(interval[0], interval[1], number_of_test_points)
    method = SteplemanWinarskyMethod(initial_step)
    average_relative_error, average_feval, data = nd.benchmark_method(
        function, first_derivative, test_points, method.compute_first_derivative, True
    )
    print("Average error =", average_relative_error)
    print("Average number of function evaluations =", average_feval)
    tabulate.tabulate(data, headers=["x", "Rel. err.", "F. Eval."], tablefmt="html")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    x = 0.000, abs. error = 8.731e-11, rel. error = 8.731e-11, Func. eval. = 24
    x = 0.632, abs. error = 5.396e-11, rel. error = 2.869e-11, Func. eval. = 22
    x = 1.263, abs. error = 8.263e-12, rel. error = 2.336e-12, Func. eval. = 22
    x = 1.895, abs. error = 1.120e-10, rel. error = 1.684e-11, Func. eval. = 22
    x = 2.526, abs. error = 2.627e-12, rel. error = 2.101e-13, Func. eval. = 22
    x = 3.158, abs. error = 3.719e-10, rel. error = 1.581e-11, Func. eval. = 24
    x = 3.789, abs. error = 3.768e-10, rel. error = 8.518e-12, Func. eval. = 22
    x = 4.421, abs. error = 1.067e-09, rel. error = 1.283e-11, Func. eval. = 22
    x = 5.053, abs. error = 2.960e-09, rel. error = 1.892e-11, Func. eval. = 22
    x = 5.684, abs. error = 7.466e-09, rel. error = 2.538e-11, Func. eval. = 22
    x = 6.316, abs. error = 2.987e-08, rel. error = 5.399e-11, Func. eval. = 24
    x = 6.947, abs. error = 1.086e-08, rel. error = 1.044e-11, Func. eval. = 22
    x = 7.579, abs. error = 4.227e-08, rel. error = 2.160e-11, Func. eval. = 22
    x = 8.211, abs. error = 6.198e-08, rel. error = 1.685e-11, Func. eval. = 22
    x = 8.842, abs. error = 1.519e-07, rel. error = 2.195e-11, Func. eval. = 22
    x = 9.474, abs. error = 2.038e-07, rel. error = 1.566e-11, Func. eval. = 22
    x = 10.105, abs. error = 5.643e-07, rel. error = 2.306e-11, Func. eval. = 22
    x = 10.737, abs. error = 9.915e-07, rel. error = 2.155e-11, Func. eval. = 22
    x = 11.368, abs. error = 7.865e-08, rel. error = 9.088e-13, Func. eval. = 22
    x = 12.000, abs. error = 2.634e-06, rel. error = 1.618e-11, Func. eval. = 22
    Average error = 2.0952510337707866e-11
    Average number of function evaluations = 22.3


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
    <thead>
    <tr><th style="text-align: right;">        x</th><th style="text-align: right;">  Rel. err.</th><th style="text-align: right;">  F. Eval.</th></tr>
    </thead>
    <tbody>
    <tr><td style="text-align: right;"> 0       </td><td style="text-align: right;">8.73115e-11</td><td style="text-align: right;">        24</td></tr>
    <tr><td style="text-align: right;"> 0.631579</td><td style="text-align: right;">2.86919e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 1.26316 </td><td style="text-align: right;">2.33637e-12</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 1.89474 </td><td style="text-align: right;">1.68435e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 2.52632 </td><td style="text-align: right;">2.10055e-13</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 3.15789 </td><td style="text-align: right;">1.58133e-11</td><td style="text-align: right;">        24</td></tr>
    <tr><td style="text-align: right;"> 3.78947 </td><td style="text-align: right;">8.51756e-12</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 4.42105 </td><td style="text-align: right;">1.28329e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 5.05263 </td><td style="text-align: right;">1.89231e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 5.68421 </td><td style="text-align: right;">2.538e-11  </td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 6.31579 </td><td style="text-align: right;">5.39932e-11</td><td style="text-align: right;">        24</td></tr>
    <tr><td style="text-align: right;"> 6.94737 </td><td style="text-align: right;">1.04363e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 7.57895 </td><td style="text-align: right;">2.16026e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 8.21053 </td><td style="text-align: right;">1.68451e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 8.84211 </td><td style="text-align: right;">2.19522e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;"> 9.47368 </td><td style="text-align: right;">1.56649e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;">10.1053  </td><td style="text-align: right;">2.30602e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;">10.7368  </td><td style="text-align: right;">2.15451e-11</td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;">11.3684  </td><td style="text-align: right;">9.0881e-13 </td><td style="text-align: right;">        22</td></tr>
    <tr><td style="text-align: right;">12       </td><td style="text-align: right;">1.61818e-11</td><td style="text-align: right;">        22</td></tr>
    </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 144-145

Map from the problem name to the initial step.

.. GENERATED FROM PYTHON SOURCE LINES 147-166

.. code-block:: Python

    initial_step_map = {
        "polynomial": 1.0,
        "inverse": 1.0e-3,
        "exp": 1.0e-1,
        "log": 1.0e-3,  # x > 0
        "sqrt": 1.0e-3,  # x > 0
        "atan": 1.0e0,
        "sin": 1.0e0,
        "scaled exp": 1.0e5,
        "GMSW": 1.0e0,
        "SXXN1": 1.0e0,
        "SXXN2": 1.0e0,
        "SXXN3": 1.0e0,
        "SXXN4": 1.0e0,
        "Oliver1": 1.0e0,
        "Oliver2": 1.0e0,
        "Oliver3": 1.0e-3,
    }








.. GENERATED FROM PYTHON SOURCE LINES 167-169

The next script evaluates a collection of benchmark problems
using the :class:`~numericalderivative.SteplemanWinarsky` class.

.. GENERATED FROM PYTHON SOURCE LINES 171-214

.. code-block:: Python

    number_of_test_points = 100
    data = []
    function_list = nd.build_benchmark()
    number_of_functions = len(function_list)
    average_relative_error_list = []
    average_feval_list = []
    for i in range(number_of_functions):
        problem = function_list[i]
        name = problem.get_name()
        initial_step = initial_step_map[name]
        function = problem.get_function()
        first_derivative = problem.get_first_derivative()
        interval = problem.get_interval()
        test_points = np.linspace(interval[0], interval[1], number_of_test_points)
        print(f"Function #{i}, {name}")
        method = SteplemanWinarskyMethod(initial_step)
        average_relative_error, average_feval, _ = nd.benchmark_method(
            function, first_derivative, test_points, method.compute_first_derivative
        )
        average_relative_error_list.append(average_relative_error)
        average_feval_list.append(average_feval)
        data.append(
            (
                name,
                initial_step,
                average_relative_error,
                average_feval,
            )
        )
    data.append(
        [
            "Average",
            "-",
            np.nanmean(average_relative_error_list),
            np.nanmean(average_feval_list),
        ]
    )
    tabulate.tabulate(
        data,
        headers=["Name", "initial_step", "Average rel. error", "Average func. eval"],
        tablefmt="html",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Function #0, polynomial
    Function #1, inverse
    Function #2, exp
    Function #3, log
    Function #4, sqrt
    Function #5, atan
    Function #6, sin
    Function #7, scaled exp
    Function #8, GMSW
    Function #9, SXXN1
    Function #10, SXXN2
    Function #11, SXXN3
    Function #12, SXXN4
    Function #13, Oliver1
    Function #14, Oliver2
    Function #15, Oliver3


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
    <thead>
    <tr><th>Name      </th><th>initial_step  </th><th style="text-align: right;">  Average rel. error</th><th style="text-align: right;">  Average func. eval</th></tr>
    </thead>
    <tbody>
    <tr><td>polynomial</td><td>1.0           </td><td style="text-align: right;">         2.7803e-16 </td><td style="text-align: right;">              7.28  </td></tr>
    <tr><td>inverse   </td><td>0.001         </td><td style="text-align: right;">         2.60826e-11</td><td style="text-align: right;">             13.8   </td></tr>
    <tr><td>exp       </td><td>0.1           </td><td style="text-align: right;">         1.81258e-11</td><td style="text-align: right;">             22.34  </td></tr>
    <tr><td>log       </td><td>0.001         </td><td style="text-align: right;">         2.73807e-11</td><td style="text-align: right;">             13.24  </td></tr>
    <tr><td>sqrt      </td><td>0.001         </td><td style="text-align: right;">         2.43901e-11</td><td style="text-align: right;">             12.86  </td></tr>
    <tr><td>atan      </td><td>1.0           </td><td style="text-align: right;">         1.02142e-10</td><td style="text-align: right;">             22.28  </td></tr>
    <tr><td>sin       </td><td>1.0           </td><td style="text-align: right;">         3.09318e-11</td><td style="text-align: right;">             25.02  </td></tr>
    <tr><td>scaled exp</td><td>100000.0      </td><td style="text-align: right;">         1.32527e-11</td><td style="text-align: right;">             21.88  </td></tr>
    <tr><td>GMSW      </td><td>1.0           </td><td style="text-align: right;">         3.33368e-11</td><td style="text-align: right;">             26.22  </td></tr>
    <tr><td>SXXN1     </td><td>1.0           </td><td style="text-align: right;">         2.67332e-09</td><td style="text-align: right;">             24.3   </td></tr>
    <tr><td>SXXN2     </td><td>1.0           </td><td style="text-align: right;">         1.90792e-11</td><td style="text-align: right;">             31.64  </td></tr>
    <tr><td>SXXN3     </td><td>1.0           </td><td style="text-align: right;">         1.46924e-11</td><td style="text-align: right;">             23.88  </td></tr>
    <tr><td>SXXN4     </td><td>1.0           </td><td style="text-align: right;">         1.18405e-11</td><td style="text-align: right;">             23.48  </td></tr>
    <tr><td>Oliver1   </td><td>1.0           </td><td style="text-align: right;">         1.63577e-11</td><td style="text-align: right;">             27     </td></tr>
    <tr><td>Oliver2   </td><td>1.0           </td><td style="text-align: right;">         1.8908e-10 </td><td style="text-align: right;">             27.04  </td></tr>
    <tr><td>Oliver3   </td><td>0.001         </td><td style="text-align: right;">         1.04484e-11</td><td style="text-align: right;">             13.2   </td></tr>
    <tr><td>Average   </td><td>-             </td><td style="text-align: right;">         2.00654e-10</td><td style="text-align: right;">             20.9662</td></tr>
    </tbody>
    </table>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.054 seconds)


.. _sphx_glr_download_auto_example_plot_stepleman_winarsky_benchmark.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_stepleman_winarsky_benchmark.ipynb <plot_stepleman_winarsky_benchmark.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_stepleman_winarsky_benchmark.py <plot_stepleman_winarsky_benchmark.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_stepleman_winarsky_benchmark.zip <plot_stepleman_winarsky_benchmark.zip>`
